# wtnew: create/open a Git worktree for a new or existing branch
# macOS + zsh/bash friendly. Requires: git, (optional) fzf
wtnew() {
  emulate -L zsh
  setopt local_options pipefail no_xtrace

  # Source common helpers if available (includes recovery, validation, discovery modules)
  local __WT_LIB="${0:A:h}/lib/wt-common.zsh"
  [[ -f "$__WT_LIB" ]] && source "$__WT_LIB"
  
  # Enable error recovery features (transaction log for rollback)
  if wt_recovery_enabled 2>/dev/null; then
    wt_transaction_begin
    trap 'wt_transaction_rollback 2>/dev/null || true' EXIT INT TERM
  fi

  local new_branch base_ref repo default_dir wt_dir
  local open_ide=1 open_app="${WT_APP:-Android Studio}"
  local explicit_remote do_push=0 inside_ok=0
  local prefer_reuse=0 reuse_slot=0 skip_create=0
  local FZF_MISSING=

  # -------- flags (optional) --------
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n|--name) new_branch="$2"; shift 2;;
      -b|--base) base_ref="$2"; shift 2;;
      -d|--dir)  wt_dir="$2"; shift 2;;
      -r|--remote) explicit_remote="$2"; shift 2;;
      --no-open) open_ide=0; shift;;
      --app)     open_app="$2"; shift 2;;
      --push)    do_push=1; shift;;
      --prefer-reuse) prefer_reuse=1; shift;;
      --inside-ok) inside_ok=1; shift;;
      -h|--help)
        cat <<'USAGE'
Usage: wtnew [options]
  -n, --name   Branch name (new or existing)
  -b, --base   Base ref (e.g., origin/main) when creating a brand-new branch
  -d, --dir    Worktree directory
  -r, --remote Remote to track/push (default: infer from base or origin)
  --no-open    Do not launch Android Studio
  --app        App name to open (default: "Android Studio")
  --push       Push new branch to the selected remote and set upstream
  --prefer-reuse  Prefer reusing an existing worktree slot (clean, safe) over creating a new dir
  --inside-ok  Allow creating a worktree path inside current repo (unsafe)
Notes:
  - If the branch exists locally ‚Üí a worktree is created on that branch.
  - If the branch exists on a remote ‚Üí local tracking branch is created from that remote.
  - If the branch does not exist anywhere ‚Üí new branch off --base (or picked interactively).
Debug:
  - Set WTNEW_DEBUG=1 to print branch/base lists and counts.
USAGE
        return 0;;
      *) echo "Unknown option: $1"; return 2;;
    esac
  done

  # Env default: always push new branches if WTNEW_ALWAYS_PUSH is set
  if (( do_push == 0 )) && [[ -n ${WTNEW_ALWAYS_PUSH:-} ]]; then
    do_push=1
  fi
  # Env default: prefer slot reuse if WTNEW_PREFER_REUSE is set
  if (( prefer_reuse == 0 )) && [[ -n ${WTNEW_PREFER_REUSE:-} ]]; then
    prefer_reuse=1
  fi

  # -------- sanity checks --------
  if ! git rev-parse --git-dir &>/dev/null; then
    echo "‚ùå Not a git repo"
    if typeset -f wt_show_hints >/dev/null 2>&1; then
      echo ""
      echo "üí° Hint: Run this command from inside a git repository"
      echo "   Or initialize one with: git init"
    fi
    return 1
  fi
  command -v fzf >/dev/null || FZF_MISSING=1

  echo "üîÑ  Fetching remotes‚Ä¶"
  if ! git fetch --all --prune --tags --quiet 2>/dev/null; then
    # Network failure - offer recovery options
    if typeset -f wt_diagnose_error >/dev/null 2>&1; then
      local fetch_output="Network fetch failed"
      local error_type=$(wt_diagnose_error "git fetch" "$fetch_output" 1)
      echo "‚ö†Ô∏è  $(wt_error_message "$error_type")"
      echo "   Continuing with cached refs..."
    else
      echo "‚ö†Ô∏è  Failed to fetch remotes, continuing with cached refs..."
    fi
  fi

  # Validate explicit remote if provided
  if [[ -n ${explicit_remote:-} ]] && ! git remote | grep -Fxq "$explicit_remote"; then
    echo "‚ùå Unknown remote: $explicit_remote"
    echo "   Available remotes: $(git remote | tr '\n' ' ')"
    
    # Offer fuzzy match suggestion
    if typeset -f wt_fuzzy_match_branch >/dev/null 2>&1; then
      local all_remotes=$(git remote)
      local closest=$(echo "$all_remotes" | grep -i "$explicit_remote" | head -1)
      if [[ -n "$closest" ]]; then
        echo ""
        echo "üí° Did you mean: $closest?"
        printf "   Use '$closest'? [Y/n]: "
        local use_closest; read -r use_closest
        if [[ "${use_closest:l}" != "n" ]]; then
          explicit_remote="$closest"
          echo "   Using: $explicit_remote"
        else
          return 1
        fi
      else
        return 1
      fi
    else
      return 1
    fi
  fi

  # -------- helper: build list of short refs (no refs/‚Ä¶ prefixes) --------
  _wt__branch_list() {
    git for-each-ref --format='%(refname:short)' refs/heads refs/remotes \
    | sed -E 's#^refs/heads/##; s#^refs/remotes/##; s#^remotes/##' \
    | grep -vE '^(HEAD|.*/HEAD)$' \
    | sort -u
  }

  # -------- branch name (fzf with free-typing) --------
  if [[ -z ${new_branch:-} ]]; then
    if [[ -z $FZF_MISSING ]]; then
      local all_branches out query choice
      all_branches="$(_wt__branch_list)"
      if [[ -n ${WT_DEBUG:-${WTNEW_DEBUG:-}} ]]; then
        echo "DBG branches count: $(printf "%s\n" "$all_branches" | sed '/^$/d' | wc -l)" >&2
        printf "%s\n" "$all_branches" >&2
      fi
      [[ -z "$all_branches" ]] && { echo "‚ùå No branches found. Try: git fetch --all --prune --tags"; return 1; }

      # Show discovery hint if available
      if typeset -f wt_show_contextual_help >/dev/null 2>&1; then
        wt_show_contextual_help branch_selection
      fi

      out="$(printf "%s\n" "$all_branches" \
        | fzf --height=${WT_FZF_HEIGHT:-40%} --reverse ${WT_FZF_OPTS:-} \
              --prompt="üÜï  Branch (type to create OR pick existing): " \
              --header="Type to filter or create new ¬∑ Enter=select ¬∑ ?=help" \
              --preview 'if [ -n "{}" ] && git rev-parse --verify -q {} >/dev/null; then \
                            git log --oneline -n 20 --decorate --graph --color=always {}; \
                          else echo "‚ûï New branch"; fi' \
              --preview-window=right,60% \
              --print-query)"
      local fzf_status=$?

      query="$(printf "%s" "$out" | head -n1)"
      choice="$(printf "%s" "$out" | tail -n1)"

      # If user cancelled (Esc/Ctrl-C), fzf returns non-zero and no output
      if (( fzf_status != 0 )) && [[ -z "$query" && -z "$choice" ]]; then
        echo "‚ùå No branch chosen"; return 1
      fi

      if [[ -n "$choice" && "$choice" != "$query" ]]; then
        new_branch="$choice"
      else
        new_branch="$query"
      fi
    else
      printf "üÜï  Branch name (new or existing): "; read -r new_branch
    fi
  fi
  [[ -z $new_branch ]] && { echo "‚ùå Branch name required"; return 1; }

  # -------- normalize selection into remote + short branch --------
  local sel="$new_branch" remote_name="" short_branch=""
  if [[ "$sel" =~ ^refs/remotes/([^/]+)/(.+)$ ]]; then
    remote_name="${match[1]}"; short_branch="${match[2]}"
  elif [[ "$sel" =~ ^remotes/([^/]+)/(.+)$ ]]; then
    remote_name="${match[1]}"; short_branch="${match[2]}"
  elif git remote | grep -Fxq "${sel%%/*}" && [[ "$sel" == */* ]]; then
    remote_name="${sel%%/*}"; short_branch="${sel#*/}"
  else
    short_branch="$sel"
  fi
  new_branch="$short_branch"

  # Strict validation of local branch name (no mutation/sanitization)
  if ! [[ "$new_branch" =~ ^[A-Za-z0-9/_\-]+$ ]]; then
    echo "‚ùå Invalid branch name: $new_branch"; return 1
  fi
  git check-ref-format --branch "$new_branch" \
    || { echo "‚ùå Invalid branch name: $new_branch"; return 1; }

  # -------- existence checks across local + any remote --------
  local local_exists=0 remote_exists=0 remote_found=""
  git show-ref --verify --quiet "refs/heads/$new_branch" && local_exists=1

  if [[ -n "$remote_name" ]] && git show-ref --verify --quiet "refs/remotes/$remote_name/$new_branch"; then
    remote_exists=1; remote_found="$remote_name"
  else
    remote_found="$(git for-each-ref --format='%(refname:short)' "refs/remotes/*/$new_branch" | awk -F/ 'NF>=3{print $2; exit}')"
    [[ -n "$remote_found" ]] && remote_exists=1
  fi

  # -------- base ref selection (only for brand-new branches) --------
  if (( !local_exists && !remote_exists )); then
    if [[ -z ${base_ref:-} ]]; then
      for guess in origin/main origin/master main master origin/develop develop; do
        if git rev-parse --verify -q "$guess" >/dev/null; then
          base_ref="$guess"; break
        fi
      done
    fi
    if [[ -z ${base_ref:-} ]]; then
      local branch_list="$(_wt__branch_list)"
      if [[ -n ${WT_DEBUG:-${WTNEW_DEBUG:-}} ]]; then
        echo "DBG base list count: $(printf "%s\n" "$branch_list" | sed '/^$/d' | wc -l)" >&2
        printf "%s\n" "$branch_list" >&2
      fi
      if [[ -n $FZF_MISSING ]]; then
        echo "üìù  Branches available (pick base):"
        printf "%s\n" "$branch_list"
        printf "‚õì  Base ref: "; read -r base_ref
      else
        base_ref="$(printf "%s\n" "$branch_list" \
          | fzf --height=${WT_FZF_HEIGHT:-40%} --reverse ${WT_FZF_OPTS:-} \
                --prompt="‚õì  Base ref: " \
                --preview 'if [ -n "{}" ] && git rev-parse --verify -q {} >/dev/null; then \
                             git log --oneline -n 30 --decorate --graph --color=always {}; \
                           else echo "invalid ref"; fi' \
                --preview-window=right,60%)"
      fi
    fi
    [[ -z $base_ref ]] && { echo "‚ùå No base ref selected"; return 1; }
    git rev-parse --verify -q "$base_ref" >/dev/null \
      || { echo "‚ùå Unknown base ref: $base_ref"; return 1; }
  fi

  # -------- reuse existing worktree for this branch if already checked out --------
  local existing_wt_dir
  existing_wt_dir="$(git worktree list --porcelain | awk -v b="$new_branch" '
    /^worktree /{d=$2}
    /^branch /{
      br=$0; sub(/^branch /,"",br); sub(/^refs\/heads\//,"",br);
      if (br==b) print d
    }' | head -n1)"
  if [[ -n "$existing_wt_dir" && -d "$existing_wt_dir" ]]; then
    echo "‚ôªÔ∏è  Branch already checked out in worktree: $existing_wt_dir"
    wt_dir="$existing_wt_dir"
    skip_create=1
  fi

  # -------- prefer reusing a clean worktree slot (optional) --------
  if (( skip_create == 0 && prefer_reuse == 1 )); then
    # Exclude repo root; find clean, non-busy slots
    local repo_root_reuse; repo_root_reuse="$(git rev-parse --show-toplevel)"
    local slots=""; local block
    block="$(git worktree list --porcelain)"
    local sdir sbr sclean sbusy out lines=""
    local IFS=$'\n'
    local d_line
    # Parse blocks into dir + branch
    local parsed
    parsed="$(printf "%s" "$block" | awk '
      BEGIN{d="";br=""}
      /^worktree /{if(d!=""){print d"\t"br}; d=$2;br=""; next}
      /^branch /{br=$0; sub(/^branch /,"",br); sub(/^refs\/heads\//,"",br); next}
      /^$/       {if(d!=""){print d"\t"br; d="";br=""}}
      END        {if(d!=""){print d"\t"br}}
    ')"
    for d_line in ${(f)parsed}; do
      sdir="${d_line%%\t*}"; sbr="${d_line#*\t}"
      [[ -z "$sdir" || "$sdir" == "$repo_root_reuse" ]] && continue
      # Skip slots already hosting the target branch (handled above) or detached
      [[ "$sbr" == "$new_branch" || -z "$sbr" ]] && continue
      # Clean?
      local dirty; dirty="$(git -C "$sdir" status --porcelain --untracked-files=all 2>/dev/null)"
      sclean=1; [[ -n "$dirty" ]] && sclean=0
      # Busy (merge/rebase/cherry-pick)?
      sbusy=0
      [[ -e "$sdir/.git/MERGE_HEAD" || -d "$sdir/.git/rebase-merge" || -d "$sdir/.git/rebase-apply" || -e "$sdir/.git/CHERRY_PICK_HEAD" ]] && sbusy=1
      (( sclean == 1 && sbusy == 0 )) && lines+="$sdir\n"
    done
    if [[ -n "$lines" ]]; then
      local slot_count; slot_count="$(printf "%s" "$lines" | sed '/^$/d' | wc -l | tr -d ' ')"
      if [[ "$slot_count" == "1" ]]; then
        wt_dir="$(printf "%s" "$lines" | head -n1)"; reuse_slot=1
        echo "‚ôªÔ∏è  Reusing worktree slot: $wt_dir"
      else
        if [[ -z $FZF_MISSING ]]; then
          local out
          # Build display with branch and status
          local display; display=""
          local s; for s in ${(f)lines}; do
            local curr_br; curr_br="$(git -C "$s" rev-parse --abbrev-ref HEAD 2>/dev/null || echo detached)"
            local st; st="$(git -C "$s" status --porcelain --untracked-files=all 2>/dev/null)"; [[ -n "$st" ]] && st="dirty" || st="clean"
            display+="$(printf "%-40s  %s\n" "$curr_br" "$s")"
          done
          out="$(printf "%s" "$display" \
            | fzf --height=${WT_FZF_HEIGHT:-40%} --reverse ${WT_FZF_OPTS:-} \
                  --prompt="‚ôªÔ∏è  Reuse slot for $new_branch: " \
                  --preview '
                      path=$(echo {} | awk "{print $NF}")
                      if [[ -d "$path" ]]; then
                        printf "Path: %s\n\n" "$path"
                        git -C "$path" status -sb --untracked-files=all 2>/dev/null
                        echo
                        printf "Recent commits:\n"
                        git -C "$path" log --oneline -n 15 --decorate --graph --color=always 2>/dev/null
                      fi
                  ' \
                  --preview-window=right,60%)" || true
          if [[ -n "$out" ]]; then
            wt_dir="$(printf "%s" "$out" | awk '{print $NF}')"; reuse_slot=1
            echo "‚ôªÔ∏è  Reusing worktree slot: $wt_dir"
          fi
        fi
      fi
    fi
  fi

  # -------- worktree dir (sibling of repo root, never nested) --------
  local repo_root repo parent_dir
  repo_root="$(git rev-parse --show-toplevel)"
  repo="$(basename "$repo_root")"
  parent_dir="$(dirname "$repo_root")"
  default_dir="${parent_dir}/${repo}-${new_branch//\//-}"
  if (( skip_create == 0 && reuse_slot == 0 )) && [[ -z ${wt_dir:-} ]]; then
    printf "üìÇ  Worktree dir [%s]: " "$default_dir"; read -r wt_dir
    wt_dir=${wt_dir:-$default_dir}
  fi
  # Normalize to absolute paths for validation
  local wt_dir_abs="${wt_dir:A}"
  local repo_root_abs="${repo_root:A}"

  # Disallow creating a worktree inside the current repository
  if (( skip_create == 0 && reuse_slot == 0 )) && (( inside_ok == 0 )) && [[ -z ${WTNEW_INSIDE_OK:-} ]] && [[ "$wt_dir_abs" == "$repo_root_abs" || "$wt_dir_abs" == $repo_root_abs/* ]]; then
    echo "‚ùå Worktree path cannot be inside the current repository: $wt_dir"
    echo "   Pick a path outside, e.g.: $default_dir"
    return 1
  fi

  if (( skip_create == 0 && reuse_slot == 0 )); then
    if [[ -e "$wt_dir_abs" ]]; then
      echo "‚ùå Path already exists: $wt_dir"
      
      # Offer recovery options
      if typeset -f wt_offer_recovery >/dev/null 2>&1; then
        wt_offer_recovery already_exists "$wt_dir"
        local recovery_choice=$?
        if (( recovery_choice == 4 )); then
          # User wants different path
          printf "Enter new path: "; read -r wt_dir
          wt_dir_abs="${wt_dir:A}"
        elif (( recovery_choice == 6 )); then
          # Reuse existing (if it's a valid worktree)
          if git worktree list --porcelain | awk '/^worktree /{print $2}' | grep -Fxq "$wt_dir_abs"; then
            echo "‚ôªÔ∏è  Reusing existing worktree"
            skip_create=1
          else
            echo "‚ùå Path exists but is not a worktree"
            return 1
          fi
        else
          return 1
        fi
      else
        return 1
      fi
    fi
    
    if (( skip_create == 0 )) && git worktree list --porcelain | awk '/^worktree /{print $2}' | grep -Fxq "$wt_dir_abs"; then
      echo "‚ùå Worktree already registered at: $wt_dir"; return 1
    fi
  fi

  # Use absolute path going forward
  wt_dir="$wt_dir_abs"

  # -------- choose remote to track/push --------
  local selected_remote=""
  if [[ -n ${explicit_remote:-} ]]; then
    selected_remote="$explicit_remote"
  elif (( remote_exists )); then
    selected_remote="$remote_found"
  elif [[ "${base_ref:-}" == */* ]]; then
    selected_remote="${base_ref%%/*}"
  elif git remote | grep -Fxq origin >/dev/null 2>&1; then
    selected_remote="origin"
  else
    selected_remote="$(git remote | head -n1)"
  fi

  # -------- create or reuse worktree --------
  if (( skip_create )); then
    : # nothing to do (already exists for this branch)
  elif (( reuse_slot )); then
    echo "‚ôªÔ∏è  Reusing slot and switching branch‚Ä¶"
    if (( local_exists )); then
      git -C "$wt_dir" switch "$new_branch" \
        || { echo "‚ùå Failed to switch to $new_branch in $wt_dir"; return 1; }
    elif (( remote_exists )); then
      git -C "$wt_dir" switch --track "${remote_found}/${new_branch}" \
        || git -C "$wt_dir" switch -c "$new_branch" "${remote_found}/${new_branch}" \
        || { echo "‚ùå Failed to create tracking branch $new_branch in $wt_dir"; return 1; }
    else
      git -C "$wt_dir" switch -c "$new_branch" "$base_ref" \
        || { echo "‚ùå Failed to create branch $new_branch from $base_ref in $wt_dir"; return 1; }
    fi
  else
    echo "‚ûï  Creating worktree‚Ä¶"
    
    # Record transaction for potential rollback
    if typeset -f wt_transaction_record >/dev/null 2>&1; then
      wt_transaction_record "dir_create" "$wt_dir"
    fi
    
    local add_failed=0
    local add_output
    if (( local_exists )); then
      add_output=$(git worktree add "$wt_dir" "$new_branch" 2>&1) || add_failed=1
    elif (( remote_exists )); then
      add_output=$(git worktree add -b "$new_branch" "$wt_dir" "${remote_found}/${new_branch}" 2>&1) || add_failed=1
    else
      add_output=$(git worktree add -b "$new_branch" "$wt_dir" "$base_ref" 2>&1) || add_failed=1
    fi
    
    if (( add_failed )); then
      echo "‚ùå worktree add failed"
      echo "$add_output" | grep -v "^$" | head -3
      
      # Diagnose and offer recovery if available
      if typeset -f wt_diagnose_error >/dev/null 2>&1; then
        local error_type=$(wt_diagnose_error "git worktree add" "$add_output" 1)
        echo ""
        echo "üí° $(wt_error_message "$error_type")"
        
        # Offer recovery based on error type
        if [[ "$error_type" == "already_checked_out" ]]; then
          echo ""
          echo "Hint: The branch is already checked out in another worktree."
          echo "      Use 'git worktree list' to find it."
        elif [[ "$error_type" == "invalid_name" ]]; then
          echo ""
          echo "Hint: Branch name contains invalid characters."
          if typeset -f wt_sanitize_branch_name >/dev/null 2>&1; then
            local sanitized=$(wt_sanitize_branch_name "$new_branch")
            echo "      Try: wtnew --name '$sanitized'"
          fi
        fi
      fi
      
      return 1
    fi
    
    # Record successful worktree creation
    if typeset -f wt_transaction_record >/dev/null 2>&1; then
      wt_transaction_record "worktree_add" "$wt_dir"
    fi
  fi

  # -------- upstream setup / push (optional) --------
  if (( !skip_create )); then
    # Determine if upstream is already configured for this branch
    local existing_remote
    existing_remote="$(git -C "$wt_dir" config --get "branch.${new_branch}.remote" 2>/dev/null || true)"

    if [[ -z "$existing_remote" ]]; then
      # Prefer the discovered remote for the branch if it exists; otherwise fall back to selected_remote
      local upstream_remote=""
      if (( remote_exists )); then
        upstream_remote="$remote_found"
      else
        upstream_remote="$selected_remote"
      fi

      if [[ -n "$upstream_remote" ]]; then
        # If the remote tracking ref already exists, use git branch --set-upstream-to
        # Otherwise, write config keys directly so future pushes target the matching remote branch
        if git show-ref --verify --quiet "refs/remotes/${upstream_remote}/${new_branch}"; then
          (cd "$wt_dir" && git branch --set-upstream-to="${upstream_remote}/${new_branch}" >/dev/null 2>&1 || true)
        else
          git -C "$wt_dir" config "branch.${new_branch}.remote" "$upstream_remote" || true
          git -C "$wt_dir" config "branch.${new_branch}.merge" "refs/heads/${new_branch}" || true
        fi
      fi
    fi

    # If no remote branch exists and --push requested, create it and set upstream
    if (( do_push )) && [[ -n "$selected_remote" ]]; then
      echo "üåê  Pushing to $selected_remote and setting upstream‚Ä¶"
      (cd "$wt_dir" && git push -u "$selected_remote" "$new_branch" >/dev/null 2>&1 || true)
    fi
  fi

  # submodules (if present)
  if (( !skip_create )); then
    if [[ -f .gitmodules ]] && grep -q 'path = ' .gitmodules 2>/dev/null; then
      echo "üîÅ  Updating submodules‚Ä¶"
      (cd "$wt_dir" && git submodule update --init --recursive --quiet)
    fi
  fi

  # -------- open IDE (reuse common helper when available) --------
  if (( open_ide )); then
    echo "üöÄ  Opening Android Studio‚Ä¶"
    if typeset -f wt_open_in_android_studio >/dev/null 2>&1; then
      wt_open_in_android_studio "$wt_dir" "$open_app"
    else
      if command -v studio >/dev/null 2>&1; then
        studio "$wt_dir" >/dev/null 2>&1 || true
      else
        if [[ -d "$wt_dir/.idea" ]]; then
          open -a "$open_app" "$wt_dir/.idea" >/dev/null 2>&1 || true
        elif [[ -f "$wt_dir/settings.gradle" || -f "$wt_dir/settings.gradle.kts" ]]; then
          local sg="$wt_dir/settings.gradle"
          [[ -f "$wt_dir/settings.gradle.kts" ]] && sg="$wt_dir/settings.gradle.kts"
          open -a "$open_app" "$sg" >/dev/null 2>&1 || true
        elif [[ -f "$wt_dir/build.gradle" || -f "$wt_dir/build.gradle.kts" ]]; then
          local bg="$wt_dir/build.gradle"
          [[ -f "$wt_dir/build.gradle.kts" ]] && bg="$wt_dir/build.gradle.kts"
          open -a "$open_app" "$bg" >/dev/null 2>&1 || true
        else
          open -a "$open_app" "$wt_dir" >/dev/null 2>&1 || true
        fi
      fi
    fi
    echo "üìÇ  If no window appears, open it manually via File ‚Üí Open‚Ä¶ ‚Üí $wt_dir"
  else
    echo "‚úÖ  Worktree ready at: $wt_dir"
  fi
  
  # Commit transaction on success (no rollback needed)
  if typeset -f wt_transaction_commit >/dev/null 2>&1; then
    wt_transaction_commit
    trap - EXIT INT TERM  # Remove rollback trap
  fi
}