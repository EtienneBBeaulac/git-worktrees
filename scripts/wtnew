# wtsi: create/open a Git worktree for a new or existing branch
# macOS + zsh/bash friendly. Requires: git, (optional) fzf
wtnew() {
  local new_branch base_ref repo default_dir wt_dir
  local open_ide=1 open_app="Android Studio"
  local FZF_MISSING=

  # -------- flags (optional) --------
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n|--name) new_branch="$2"; shift 2;;
      -b|--base) base_ref="$2"; shift 2;;
      -d|--dir)  wt_dir="$2"; shift 2;;
      --no-open) open_ide=0; shift;;
      --app)     open_app="$2"; shift 2;;
      -h|--help)
        cat <<'USAGE'
Usage: wtsi [options]
  -n, --name   Branch name (new or existing)
  -b, --base   Base ref (e.g., origin/main) when creating a brand-new branch
  -d, --dir    Worktree directory
  --no-open    Do not launch Android Studio
  --app        App name to open (default: "Android Studio")
Notes:
  - If the branch exists locally ‚Üí a worktree is created on that branch.
  - If the branch exists only on origin ‚Üí local tracking branch is created.
  - If the branch does not exist anywhere ‚Üí new branch off --base (or picked interactively).
Debug:
  - Set WTSI_DEBUG=1 to print branch/base lists and counts.
USAGE
        return 0;;
      *) echo "Unknown option: $1"; return 2;;
    esac
  done

  # -------- sanity checks --------
  git rev-parse --git-dir &>/dev/null || { echo "‚ùå Not a git repo"; return 1; }
  command -v fzf >/dev/null || FZF_MISSING=1

  echo "üîÑ  Fetching origin‚Ä¶"
  git fetch --prune --tags --quiet origin

  # -------- branch name (fzf with free-typing) --------
  if [[ -z $new_branch ]]; then
    if [[ -z $FZF_MISSING ]]; then
      local all_branches out query choice
      all_branches="$(
        git branch --all --format='%(refname:short)' \
        | awk '$0 !~ /->/ && $0 != "HEAD" && $0 != "origin/HEAD" {print}' \
        | sort -u
      )"
      if [[ -n $WTSI_DEBUG ]]; then
        echo "DBG branches count: $(printf "%s\n" "$all_branches" | sed '/^$/d' | wc -l)" >&2
        printf "%s\n" "$all_branches" >&2
      fi
      if [[ -z "$all_branches" ]]; then
        echo "‚ùå No branches found. Try: git fetch --all --prune --tags"; return 1
      fi

      out="$(printf "%s\n" "$all_branches" \
        | fzf --height=40% --reverse \
              --prompt="üÜï  Branch (type to create OR pick existing): " \
              --preview '[[ -n {} ]] && git log --oneline -n 20 --decorate --graph --color=always {} || echo "‚ûï New branch"' \
              --preview-window=right,60% \
              --print-query)" || { echo "‚ùå No branch chosen"; return 1; }

      query="$(printf "%s" "$out" | head -n1)"
      choice="$(printf "%s" "$out" | tail -n1)"
      if [[ -n "$choice" && "$choice" != "$query" ]]; then
        new_branch="$choice"
      else
        new_branch="$query"
      fi
    else
      printf "üÜï  Branch name (new or existing): "; read -r new_branch
    fi
  fi
  [[ -z $new_branch ]] && { echo "‚ùå Branch name required"; return 1; }

  # sanitize & validate
  local sane_branch
  sane_branch=$(printf "%s" "$new_branch" \
    | tr '[:upper:] ' '[:lower:]-' \
    | sed 's#[^a-z0-9/_\-]##g')
  git check-ref-format --branch "$sane_branch" \
    || { echo "‚ùå Invalid branch name: $sane_branch"; return 1; }
  new_branch="$sane_branch"

  # existence checks
  local local_exists=0 remote_exists=0
  git show-ref --verify --quiet "refs/heads/$new_branch" && local_exists=1
  git show-ref --verify --quiet "refs/remotes/origin/$new_branch" && remote_exists=1

  # -------- base ref selection (only for brand-new branches) --------
  if (( !local_exists && !remote_exists )); then
    if [[ -z $base_ref ]]; then
      for guess in origin/main origin/master main master origin/develop develop; do
        if git rev-parse --verify -q "$guess" >/dev/null; then
          base_ref="$guess"; break
        fi
      done
    fi
    if [[ -z $base_ref ]]; then
      local branch_list
      branch_list="$(
        git branch --all --format='%(refname:short)' \
        | awk '$0 !~ /->/ && $0 != "HEAD" && $0 != "origin/HEAD" {print}' \
        | sort -u
      )"
      if [[ -n $WTSI_DEBUG ]]; then
        echo "DBG base list count: $(printf "%s\n" "$branch_list" | sed '/^$/d' | wc -l)" >&2
        printf "%s\n" "$branch_list" >&2
      fi
      echo "üìù  Branches available (pick base):"
      if [[ -n $FZF_MISSING ]]; then
        printf "%s\n" "$branch_list"
        printf "‚õì  Base ref: "; read -r base_ref
      else
        base_ref="$(printf "%s\n" "$branch_list" \
          | fzf --height=40% --reverse \
                --prompt="‚õì  Base ref: " \
                --preview '[[ -n {} ]] && git log --oneline -n 30 --decorate --graph --color=always {}' \
                --preview-window=right,60%)"
      fi
    fi
    [[ -z $base_ref ]] && { echo "‚ùå No base ref selected"; return 1; }
    git rev-parse --verify -q "$base_ref" >/dev/null \
      || { echo "‚ùå Unknown base ref: $base_ref"; return 1; }
  fi

  # -------- worktree dir --------
  repo=${PWD##*/}
  default_dir="../${repo}-${new_branch//\//-}"
  if [[ -z $wt_dir ]]; then
    printf "üìÇ  Worktree dir [%s]: " "$default_dir"; read -r wt_dir
    wt_dir=${wt_dir:-$default_dir}
  fi
  [[ -e "$wt_dir" ]] && { echo "‚ùå Path already exists: $wt_dir"; return 1; }
  if git worktree list --porcelain | awk '/^worktree /{print $2}' | grep -Fxq "$wt_dir"; then
    echo "‚ùå Worktree already registered at: $wt_dir"; return 1
  fi

  # -------- create worktree (3 cases) --------
  echo "‚ûï  Creating worktree‚Ä¶"
  if (( local_exists )); then
    git worktree add "$wt_dir" "$new_branch" \
      || { echo "‚ùå worktree add failed"; return 1; }
  elif (( remote_exists )); then
    git worktree add -b "$new_branch" "$wt_dir" "origin/$new_branch" \
      || { echo "‚ùå worktree add failed"; return 1; }
  else
    git worktree add -b "$new_branch" "$wt_dir" "$base_ref" \
      || { echo "‚ùå worktree add failed"; return 1; }
  fi

  # set upstream to origin/<branch> if remote exists (or if base was origin/*)
  if (( remote_exists )) || [[ "$base_ref" == origin/* ]]; then
    (cd "$wt_dir" && git branch --set-upstream-to="origin/$new_branch" >/dev/null 2>&1 || true)
  fi

  # submodules (if present)
  if [[ -f .gitmodules ]] && grep -q 'path = ' .gitmodules 2>/dev/null; then
    echo "üîÅ  Updating submodules‚Ä¶"
    (cd "$wt_dir" && git submodule update --init --recursive --quiet)
  fi

  # -------- open IDE (robust macOS chain) --------
  if (( open_ide )); then
    echo "üöÄ  Opening Android Studio‚Ä¶"

    # Prefer CLI if available (JetBrains Toolbox often installs this)
    if command -v studio >/dev/null 2>&1; then
      studio "$wt_dir" >/dev/null 2>&1 || true
    else
      # Try opening a project marker first, then fall back to the dir
      if [[ -d "$wt_dir/.idea" ]]; then
        open -a "$open_app" "$wt_dir/.idea" >/dev/null 2>&1 || true
      elif [[ -f "$wt_dir/settings.gradle" || -f "$wt_dir/settings.gradle.kts" ]]; then
        local sg
        sg="$wt_dir/settings.gradle"
        [[ -f "$wt_dir/settings.gradle.kts" ]] && sg="$wt_dir/settings.gradle.kts"
        open -a "$open_app" "$sg" >/dev/null 2>&1 || true
      elif [[ -f "$wt_dir/build.gradle" || -f "$wt_dir/build.gradle.kts" ]]; then
        local bg
        bg="$wt_dir/build.gradle"
        [[ -f "$wt_dir/build.gradle.kts" ]] && bg="$wt_dir/build.gradle.kts"
        open -a "$open_app" "$bg" >/dev/null 2>&1 || true
      else
        # Last resort: open the folder (no -n; let Studio reuse existing process)
        open -a "$open_app" "$wt_dir" >/dev/null 2>&1 || true
      fi
    fi
    echo "üìÇ  If no window appears, open it manually via File ‚Üí Open‚Ä¶ ‚Üí $wt_dir"
  else
    echo "‚úÖ  Worktree ready at: $wt_dir"
  fi
}