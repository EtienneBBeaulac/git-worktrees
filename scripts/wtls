# wtls: list Git worktrees with status, optional fzf picker
# macOS + zsh/bash friendly. Requires: git, (optional) fzf
wtls() {
  emulate -L zsh
  setopt local_options pipefail

  # Source common helpers if available
  local __WT_LIB="${0:A:h}/lib/wt-common.zsh"
  [[ -f "$__WT_LIB" ]] && source "$__WT_LIB"

  local use_fzf=0 do_open=0 open_app="${WT_APP:-Android Studio}" prune_stale=0
  local FZF_MISSING=

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --fzf)         use_fzf=1; shift;;
      --open)        do_open=1; shift;;
      --no-open)     do_open=0; shift;;
      --app)         open_app="$2"; shift 2;;
      --prune-stale) prune_stale=1; shift;;
      -h|--help)
        cat <<'USAGE'
Usage: wtls [--fzf] [--open] [--app NAME] [--prune-stale]
  --fzf          Interactive picker with preview
  --open         When picking with --fzf, open the selected worktree in Android Studio
  --no-open      Do not open, even if --open is set (print path)
  --app NAME     App to open (default: "Android Studio")
  --prune-stale  Prune stale/prunable worktrees and exit
USAGE
        return 0;;
      *) echo "Unknown option: $1"; return 2;;
    esac
  done

  git rev-parse --git-dir &>/dev/null || { echo "❌ Not a git repo"; return 1; }

  if (( prune_stale )); then
    echo "🧹  Pruning stale worktrees…"
    git worktree prune -v || true
    return 0
  fi

  command -v fzf >/dev/null || FZF_MISSING=1

  # Parse worktrees: dir|branch|head
  local wt_table
  wt_table="$(
    git worktree list --porcelain |
    awk '
      BEGIN { path=""; head=""; br="" }
      function flush() {
        if (path != "") {
          if (br == "") br="(detached)";
          printf "%s|%s|%s\n", path, br, head
        }
      }
      /^worktree / { flush(); path=$2; head=""; br=""; next }
      /^HEAD /     { head=$2; next }
      /^branch /   {
        br=$0
        sub(/^branch /,"",br)
        next
      }
      END { flush() }
    '
  )"

  [[ -z "$wt_table" ]] && { echo "ℹ️  No worktrees found."; return 0; }

  # Build table with short branch and status
  local lines=""
  local IFS=$'\n'
  local row
  for row in ${(f)wt_table}; do
    local dir="${row%%|*}"
    local rest="${row#*|}"
    local br_full="${rest%%|*}"
    local head="${rest##*|}"
    local shortbr
    if typeset -f wt_short_ref >/dev/null 2>&1; then
      shortbr="$(wt_short_ref "$br_full")"
    else
      shortbr="$br_full"
    fi
    [[ -z "$shortbr" ]] && shortbr="(detached)@${head:0:7}"

    # Determine status (clean/dirty) and ahead/behind
    local status="" dirty ahead behind upstream
    dirty="$(git -C "$dir" status --porcelain --untracked-files=all 2>/dev/null)"
    if [[ -n "$dirty" ]]; then
      status+="dirty"
    else
      status+="clean"
    fi
    upstream="$(git -C "$dir" rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || true)"
    if [[ -n "$upstream" ]]; then
      local lr; lr="$(git -C "$dir" rev-list --left-right --count "${upstream}...HEAD" 2>/dev/null || echo "0 0")"
      behind="$(echo "$lr" | awk '{print $1}')"
      ahead="$(echo "$lr" | awk '{print $2}')"
      if (( ahead > 0 )); then status+=" ↑${ahead}"; fi
      if (( behind > 0 )); then status+=" ↓${behind}"; fi
    fi

    lines+="$shortbr\t$dir\t$status\n"
  done

  if (( use_fzf )) && [[ -z $FZF_MISSING ]]; then
    local out
    out="$(printf "%s" "$lines" \
      | fzf --height=${WT_FZF_HEIGHT:-40%} --reverse ${WT_FZF_OPTS:-} \
            --prompt="📋 Worktrees: " \
            --with-nth=1,2 --delimiter='\t' \
            --preview 'd=$(printf "%s" {} | awk -F"\t" "{print $2}"); if [ -d "$d" ]; then cd "$d" && git status -sb --untracked-files=all; echo; git log --oneline -n 20 --decorate --graph --color=always; fi' \
            --preview-window=right,60%)" || { echo "❌ No selection"; return 1; }
    local sel_branch sel_dir
    sel_branch="${out%%\t*}"
    sel_dir="${out#*\t}"; sel_dir="${sel_dir%%\t*}"
    if (( do_open )); then
      echo "🚀  Opening Android Studio…"
      if typeset -f wt_open_in_android_studio >/dev/null 2>&1; then
        wt_open_in_android_studio "$sel_dir" "$open_app"
      else
        if command -v studio >/dev/null 2>&1; then
          studio "$sel_dir" >/dev/null 2>&1 || true
        else
          open -a "$open_app" "$sel_dir" >/dev/null 2>&1 || true
        fi
      fi
      echo "📂  If no window appears, open it manually via File → Open… → $sel_dir"
    else
      echo "$sel_dir"
    fi
  else
    # Print tabular list
    printf "%s\n" "$lines" | awk -F"\t" '{printf "%-40s  %-60s  %s\n", $1, $2, $3}'
  fi
}


